
uart_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00804000  00000324  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000324  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000203  00804016  00804016  000003ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036da  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f95  00000000  00000000  00003b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054b  00000000  00000000  00006b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00007064  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000188e  00000000  00000000  00007160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000243  00000000  00000000  000089ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00008c31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_56>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	e4 e2       	ldi	r30, 0x24	; 36
 108:	f3 e0       	ldi	r31, 0x03	; 3
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a6 31       	cpi	r26, 0x16	; 22
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	22 e4       	ldi	r18, 0x42	; 66
 11c:	a6 e1       	ldi	r26, 0x16	; 22
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	a9 31       	cpi	r26, 0x19	; 25
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 9b 00 	call	0x136	; 0x136 <main>
 12e:	0c 94 90 01 	jmp	0x320	; 0x320 <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <main>:
#include <string.h>
#include "uart.h"

int main(void)
{
	UART_init();
 136:	0e 94 fd 00 	call	0x1fa	; 0x1fa <UART_init>
	UART_sendString("serial\r\n");
 13a:	8d e0       	ldi	r24, 0x0D	; 13
 13c:	90 e4       	ldi	r25, 0x40	; 64
 13e:	0e 94 1c 01 	call	0x238	; 0x238 <UART_sendString>
	sei();
 142:	78 94       	sei
 144:	ff cf       	rjmp	.-2      	; 0x144 <main+0xe>

00000146 <__vector_56>:
	{
	}
}

ISR(USART4_RXC_vect)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	0b b6       	in	r0, 0x3b	; 59
 152:	0f 92       	push	r0
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
	char data = UART_rx_get_c();
 170:	0e 94 3a 01 	call	0x274	; 0x274 <UART_rx_get_c>
	if(uart_read_length < uart_receive_buf_size)
	{
		uart_receive_buf[uart_read_length++] = data;
 174:	e0 91 18 40 	lds	r30, 0x4018	; 0x804018 <uart_read_length>
 178:	c1 e0       	ldi	r28, 0x01	; 1
 17a:	ce 0f       	add	r28, r30
 17c:	c0 93 18 40 	sts	0x4018, r28	; 0x804018 <uart_read_length>
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	e7 5e       	subi	r30, 0xE7	; 231
 184:	ff 4b       	sbci	r31, 0xBF	; 191
 186:	80 83       	st	Z, r24
		if (data == '\0')
 188:	81 11       	cpse	r24, r1
 18a:	22 c0       	rjmp	.+68     	; 0x1d0 <__vector_56+0x8a>
		{
			memcpy(uart_read_data, uart_receive_buf, uart_read_length);
 18c:	d0 e0       	ldi	r29, 0x00	; 0
 18e:	ae 01       	movw	r20, r28
 190:	69 e1       	ldi	r22, 0x19	; 25
 192:	70 e4       	ldi	r23, 0x40	; 64
 194:	89 e1       	ldi	r24, 0x19	; 25
 196:	91 e4       	ldi	r25, 0x41	; 65
 198:	0e 94 50 01 	call	0x2a0	; 0x2a0 <memcpy>
			memset(uart_receive_buf,0,uart_read_length);
 19c:	ae 01       	movw	r20, r28
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	89 e1       	ldi	r24, 0x19	; 25
 1a4:	90 e4       	ldi	r25, 0x40	; 64
 1a6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <memset>
			uart_read_length = 0;
 1aa:	10 92 18 40 	sts	0x4018, r1	; 0x804018 <uart_read_length>
			
			char* read_com = strtok((char*)uart_read_data," ");
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	70 e4       	ldi	r23, 0x40	; 64
 1b2:	89 e1       	ldi	r24, 0x19	; 25
 1b4:	91 e4       	ldi	r25, 0x41	; 65
 1b6:	0e 94 4c 01 	call	0x298	; 0x298 <strtok>
 1ba:	ec 01       	movw	r28, r24
			char* read_val = strtok(NULL, " ");
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	70 e4       	ldi	r23, 0x40	; 64
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 4c 01 	call	0x298	; 0x298 <strtok>
			
			uart_com_routine(read_com, read_val);
 1c8:	bc 01       	movw	r22, r24
 1ca:	ce 01       	movw	r24, r28
 1cc:	0e 94 41 01 	call	0x282	; 0x282 <uart_com_routine>
		}
	}
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	bf 91       	pop	r27
 1da:	af 91       	pop	r26
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	7f 91       	pop	r23
 1e2:	6f 91       	pop	r22
 1e4:	5f 91       	pop	r21
 1e6:	4f 91       	pop	r20
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0b be       	out	0x3b, r0	; 59
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <UART_init>:
unsigned char uart_receive_buf[uart_receive_buf_size];
unsigned char uart_read_data[uart_receive_buf_size];

void UART_init(void)
{
	PORTE.DIR &= ~PIN1_bm;
 1fa:	e0 e8       	ldi	r30, 0x80	; 128
 1fc:	f4 e0       	ldi	r31, 0x04	; 4
 1fe:	80 81       	ld	r24, Z
 200:	8d 7f       	andi	r24, 0xFD	; 253
 202:	80 83       	st	Z, r24
	PORTE.DIR |= PIN0_bm;
 204:	80 81       	ld	r24, Z
 206:	81 60       	ori	r24, 0x01	; 1
 208:	80 83       	st	Z, r24
	//UART register
	USART4.BAUD = (uint16_t)USART4_BAUD_RATE(9600);
 20a:	e0 e8       	ldi	r30, 0x80	; 128
 20c:	f8 e0       	ldi	r31, 0x08	; 8
 20e:	83 e8       	ldi	r24, 0x83	; 131
 210:	96 e0       	ldi	r25, 0x06	; 6
 212:	80 87       	std	Z+8, r24	; 0x08
 214:	91 87       	std	Z+9, r25	; 0x09
	USART4.CTRLA |= USART_RXCIE_bm;
 216:	85 81       	ldd	r24, Z+5	; 0x05
 218:	80 68       	ori	r24, 0x80	; 128
 21a:	85 83       	std	Z+5, r24	; 0x05
	USART4.CTRLB |= USART_TXEN_bm | USART_RXEN_bm;
 21c:	86 81       	ldd	r24, Z+6	; 0x06
 21e:	80 6c       	ori	r24, 0xC0	; 192
 220:	86 83       	std	Z+6, r24	; 0x06
	USART4.CTRLC |= USART_CHSIZE1_bm | USART_CHSIZE0_bm;
 222:	87 81       	ldd	r24, Z+7	; 0x07
 224:	83 60       	ori	r24, 0x03	; 3
 226:	87 83       	std	Z+7, r24	; 0x07
 228:	08 95       	ret

0000022a <UART_sendChar>:
}

void UART_sendChar(char c)
{
	while (!(USART4.STATUS & USART_DREIF_bm))
 22a:	90 91 84 08 	lds	r25, 0x0884	; 0x800884 <__TEXT_REGION_LENGTH__+0x7e0884>
 22e:	95 ff       	sbrs	r25, 5
 230:	fc cf       	rjmp	.-8      	; 0x22a <UART_sendChar>
	{
		;
	}
	USART4.TXDATAL = c;
 232:	80 93 82 08 	sts	0x0882, r24	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
 236:	08 95       	ret

00000238 <UART_sendString>:
}


void UART_sendString(char *str)
{
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	8c 01       	movw	r16, r24
	for(size_t i = 0; i < strlen(str); i++)
 242:	c0 e0       	ldi	r28, 0x00	; 0
 244:	d0 e0       	ldi	r29, 0x00	; 0
 246:	07 c0       	rjmp	.+14     	; 0x256 <UART_sendString+0x1e>
	{
		UART_sendChar(str[i]);
 248:	f8 01       	movw	r30, r16
 24a:	ec 0f       	add	r30, r28
 24c:	fd 1f       	adc	r31, r29
 24e:	80 81       	ld	r24, Z
 250:	0e 94 15 01 	call	0x22a	; 0x22a <UART_sendChar>
}


void UART_sendString(char *str)
{
	for(size_t i = 0; i < strlen(str); i++)
 254:	21 96       	adiw	r28, 0x01	; 1
 256:	f8 01       	movw	r30, r16
 258:	01 90       	ld	r0, Z+
 25a:	00 20       	and	r0, r0
 25c:	e9 f7       	brne	.-6      	; 0x258 <UART_sendString+0x20>
 25e:	31 97       	sbiw	r30, 0x01	; 1
 260:	e0 1b       	sub	r30, r16
 262:	f1 0b       	sbc	r31, r17
 264:	ce 17       	cp	r28, r30
 266:	df 07       	cpc	r29, r31
 268:	78 f3       	brcs	.-34     	; 0x248 <UART_sendString+0x10>
	{
		UART_sendChar(str[i]);
	}
}
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	08 95       	ret

00000274 <UART_rx_get_c>:

uint8_t UART_rx_get_c()
{
	while(!(USART4.STATUS & USART_RXCIF_bm))
 274:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <__TEXT_REGION_LENGTH__+0x7e0884>
 278:	88 23       	and	r24, r24
 27a:	e4 f7       	brge	.-8      	; 0x274 <UART_rx_get_c>
	;
	return USART4.RXDATAL;
 27c:	80 91 80 08 	lds	r24, 0x0880	; 0x800880 <__TEXT_REGION_LENGTH__+0x7e0880>
}
 280:	08 95       	ret

00000282 <uart_com_routine>:

void uart_com_routine(char* u_com, char* read_val)
{
	if(!strcmp(u_com, "uart"))
 282:	62 e0       	ldi	r22, 0x02	; 2
 284:	70 e4       	ldi	r23, 0x40	; 64
 286:	0e 94 60 01 	call	0x2c0	; 0x2c0 <strcmp>
 28a:	89 2b       	or	r24, r25
 28c:	21 f4       	brne	.+8      	; 0x296 <uart_com_routine+0x14>
	{
		UART_sendString("uart4 serial\r\n");
 28e:	87 e0       	ldi	r24, 0x07	; 7
 290:	90 e4       	ldi	r25, 0x40	; 64
 292:	0e 94 1c 01 	call	0x238	; 0x238 <UART_sendString>
 296:	08 95       	ret

00000298 <strtok>:
 298:	46 e1       	ldi	r20, 0x16	; 22
 29a:	50 e4       	ldi	r21, 0x40	; 64
 29c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <strtok_r>

000002a0 <memcpy>:
 2a0:	fb 01       	movw	r30, r22
 2a2:	dc 01       	movw	r26, r24
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <memcpy+0xa>
 2a6:	01 90       	ld	r0, Z+
 2a8:	0d 92       	st	X+, r0
 2aa:	41 50       	subi	r20, 0x01	; 1
 2ac:	50 40       	sbci	r21, 0x00	; 0
 2ae:	d8 f7       	brcc	.-10     	; 0x2a6 <memcpy+0x6>
 2b0:	08 95       	ret

000002b2 <memset>:
 2b2:	dc 01       	movw	r26, r24
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <memset+0x6>
 2b6:	6d 93       	st	X+, r22
 2b8:	41 50       	subi	r20, 0x01	; 1
 2ba:	50 40       	sbci	r21, 0x00	; 0
 2bc:	e0 f7       	brcc	.-8      	; 0x2b6 <memset+0x4>
 2be:	08 95       	ret

000002c0 <strcmp>:
 2c0:	fb 01       	movw	r30, r22
 2c2:	dc 01       	movw	r26, r24
 2c4:	8d 91       	ld	r24, X+
 2c6:	01 90       	ld	r0, Z+
 2c8:	80 19       	sub	r24, r0
 2ca:	01 10       	cpse	r0, r1
 2cc:	d9 f3       	breq	.-10     	; 0x2c4 <strcmp+0x4>
 2ce:	99 0b       	sbc	r25, r25
 2d0:	08 95       	ret

000002d2 <strtok_r>:
 2d2:	fa 01       	movw	r30, r20
 2d4:	a1 91       	ld	r26, Z+
 2d6:	b0 81       	ld	r27, Z
 2d8:	00 97       	sbiw	r24, 0x00	; 0
 2da:	19 f4       	brne	.+6      	; 0x2e2 <strtok_r+0x10>
 2dc:	10 97       	sbiw	r26, 0x00	; 0
 2de:	e1 f0       	breq	.+56     	; 0x318 <strtok_r+0x46>
 2e0:	cd 01       	movw	r24, r26
 2e2:	dc 01       	movw	r26, r24
 2e4:	cd 01       	movw	r24, r26
 2e6:	0d 90       	ld	r0, X+
 2e8:	00 20       	and	r0, r0
 2ea:	11 f4       	brne	.+4      	; 0x2f0 <strtok_r+0x1e>
 2ec:	c0 01       	movw	r24, r0
 2ee:	13 c0       	rjmp	.+38     	; 0x316 <strtok_r+0x44>
 2f0:	fb 01       	movw	r30, r22
 2f2:	21 91       	ld	r18, Z+
 2f4:	22 23       	and	r18, r18
 2f6:	19 f0       	breq	.+6      	; 0x2fe <strtok_r+0x2c>
 2f8:	20 15       	cp	r18, r0
 2fa:	d9 f7       	brne	.-10     	; 0x2f2 <strtok_r+0x20>
 2fc:	f3 cf       	rjmp	.-26     	; 0x2e4 <strtok_r+0x12>
 2fe:	fb 01       	movw	r30, r22
 300:	21 91       	ld	r18, Z+
 302:	20 15       	cp	r18, r0
 304:	19 f4       	brne	.+6      	; 0x30c <strtok_r+0x3a>
 306:	1e 92       	st	-X, r1
 308:	11 96       	adiw	r26, 0x01	; 1
 30a:	06 c0       	rjmp	.+12     	; 0x318 <strtok_r+0x46>
 30c:	22 23       	and	r18, r18
 30e:	c1 f7       	brne	.-16     	; 0x300 <strtok_r+0x2e>
 310:	0d 90       	ld	r0, X+
 312:	00 20       	and	r0, r0
 314:	a1 f7       	brne	.-24     	; 0x2fe <strtok_r+0x2c>
 316:	d0 01       	movw	r26, r0
 318:	fa 01       	movw	r30, r20
 31a:	a1 93       	st	Z+, r26
 31c:	b0 83       	st	Z, r27
 31e:	08 95       	ret

00000320 <_exit>:
 320:	f8 94       	cli

00000322 <__stop_program>:
 322:	ff cf       	rjmp	.-2      	; 0x322 <__stop_program>
